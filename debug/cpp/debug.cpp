/*! Copyright (c) 2024 stochtree authors*/
#include <stochtree/dispatcher.h>

#include <iostream>
#include <random>
#include <string>
#include <unordered_map>
#include <vector>

namespace StochTree{

void GenerateFixedData(Eigen::MatrixXd& covariates, Eigen::MatrixXd& basis, Eigen::MatrixXd& outcome, Eigen::MatrixXd& rfx_basis, std::vector<int32_t>& rfx_groups, int n, int x_cols, int omega_cols, int y_cols, int rfx_basis_cols) {
  CHECK_EQ(n, 100);
  CHECK_EQ(x_cols, 5);
  CHECK_EQ(omega_cols, 1);
  CHECK_EQ(y_cols, 1);
  CHECK_EQ(rfx_basis_cols, 1);
  
  covariates << 0.766969853, 0.83894646, 0.63649772, 0.6747788934, 0.27398269,
                0.634970996, 0.15237997, 0.3800786, 0.6457891271, 0.21604451,
                0.229598754, 0.12461481, 0.81407372, 0.364336529, 0.45160373,
                0.741084778, 0.53356288, 0.58940162, 0.9995219493, 0.19142269,
                0.618177813, 0.88876378, 0.51174404, 0.8827708189, 0.12730742,
                0.858657839, 0.9271676, 0.5115294, 0.67865624, 0.28658962,
                0.719224842, 0.0546961, 0.42850897, 0.260336376, 0.1371501,
                0.747422328, 0.87172033, 0.98791964, 0.4018020707, 0.29145664,
                0.3158837, 0.39253551, 0.83610831, 0.0101785748, 0.1955386,
                0.419554105, 0.5586495, 0.19908607, 0.4873921743, 0.35568569,
                0.012786428, 0.46925501, 0.25363201, 0.3429851863, 0.2071495,
                0.887479904, 0.66166194, 0.31100105, 0.2895678403, 0.00117005,
                0.147758652, 0.14108789, 0.0361254, 0.4790630946, 0.47336526,
                0.899947367, 0.03730855, 0.33408769, 0.368503517, 0.30600202,
                0.527616998, 0.22344076, 0.20325828, 0.9296060419, 0.34518043,
                0.947085596, 0.85906392, 0.35535464, 0.529360628, 0.8781696,
                0.716097994, 0.9149628, 0.11689428, 0.1157865208, 0.31602707,
                0.433331308, 0.53848417, 0.34146036, 0.4967994317, 0.12822296,
                0.420861259, 0.28802486, 0.62324752, 0.2045601751, 0.06909585,
                0.275279159, 0.69079999, 0.29498051, 0.0082852058, 0.45247107,
                0.909681016, 0.35067747, 0.66813255, 0.3866910117, 0.65315347,
                0.828031845, 0.74096924, 0.33982958, 0.0009472317, 0.65103292,
                0.261653444, 0.43179244, 0.89632155, 0.8636559783, 0.93461464,
                0.209384357, 0.12561389, 0.69809409, 0.4752417156, 0.34963379,
                0.737655852, 0.42078584, 0.09970929, 0.5218528947, 0.36737846,
                0.975034732, 0.69977514, 0.33918481, 0.5443784453, 0.35411297,
                0.053533786, 0.98021485, 0.71035393, 0.189234901, 0.73372176,
                0.364139644, 0.47595789, 0.24620073, 0.4284725219, 0.46145259,
                0.696115067, 0.18095114, 0.66919045, 0.9517078404, 0.31686943,
                0.920878008, 0.89758374, 0.21445324, 0.5666448742, 0.29554824,
                0.397853079, 0.12019741, 0.10775046, 0.0799620333, 0.20065807,
                0.322087545, 0.68342919, 0.29873607, 0.0044371644, 0.66733723,
                0.661407114, 0.0558764, 0.10688295, 0.067841246, 0.52254161,
                0.593253554, 0.40498486, 0.97342655, 0.1917967587, 0.2078643,
                0.392762915, 0.91608107, 0.98894976, 0.3599016496, 0.70576753,
                0.758995247, 0.19899099, 0.95978035, 0.8000916124, 0.8356055,
                0.105617762, 0.12135206, 0.47523114, 0.3594282658, 0.71053726,
                0.754330984, 0.803395, 0.11297253, 0.5072350584, 0.05109695,
                0.410083859, 0.13842349, 0.3671543, 0.262290115, 0.76582706,
                0.498883172, 0.52094766, 0.23674406, 0.8919167451, 0.26313017,
                0.315790046, 0.57934811, 0.96794023, 0.7292640421, 0.63874656,
                0.969918807, 0.86839672, 0.17867962, 0.797609952, 0.3123159,
                0.291589217, 0.37982099, 0.92081884, 0.3760313739, 0.30599535,
                0.874146047, 0.64472863, 0.74944373, 0.0179410274, 0.06637048,
                0.006168369, 0.36819005, 0.48640614, 0.5182905369, 0.37514676,
                0.018794786, 0.50404546, 0.30706335, 0.239409535, 0.78368968,
                0.218041312, 0.08232156, 0.910968, 0.236348928, 0.08734924,
                0.240712896, 0.81851635, 0.75910757, 0.7666831033, 0.51030368,
                0.32422135, 0.37234399, 0.4268269, 0.0688136201, 0.52522145,
                0.737050103, 0.55333162, 0.35681609, 0.5527229193, 0.45528166,
                0.666105454, 0.44928217, 0.93068357, 0.2682658806, 0.47992145,
                0.072705164, 0.24379538, 0.36250275, 0.2693803106, 0.88583253,
                0.393483048, 0.7180344, 0.88936403, 0.9690254654, 0.41720031,
                0.726532397, 0.15675097, 0.14675637, 0.973136256, 0.86701643,
                0.206543021, 0.70612692, 0.9923119, 0.1270776591, 0.43317344,
                0.392393596, 0.6581254, 0.51121301, 0.8005079071, 0.16056554,
                0.326374607, 0.48817642, 0.68630408, 0.9265561129, 0.48683193,
                0.761818521, 0.71751337, 0.83854992, 0.134206275, 0.25700676,
                0.930924999, 0.37469277, 0.42861545, 0.7379696709, 0.9670993,
                0.601101112, 0.56631699, 0.85690728, 0.0792362478, 0.23640603,
                0.294070227, 0.02818223, 0.83060893, 0.8203584203, 0.17647972,
                0.393978659, 0.88639966, 0.80788018, 0.4202279691, 0.75344798,
                0.381183787, 0.98751161, 0.13933232, 0.5427466533, 0.15809025,
                0.203872876, 0.31032719, 0.53000948, 0.6001499062, 0.43581315,
                0.355075927, 0.10865708, 0.21823445, 0.5707600345, 0.84459087,
                0.415892882, 0.09056941, 0.85957968, 0.9296874236, 0.39317951,
                0.885163931, 0.60617414, 0.22888755, 0.9225545505, 0.41601782,
                0.803631177, 0.63855664, 0.4968153, 0.4970232591, 0.28230652,
                0.755692566, 0.36382158, 0.31492054, 0.9853899847, 0.45864754,
                0.761099141, 0.88094342, 0.82542666, 0.977985516, 0.5416208,
                0.536037115, 0.19298885, 0.67674639, 0.213044832, 0.29409245,
                0.050087478, 0.56597845, 0.22309031, 0.7668617836, 0.02385271,
                0.847882026, 0.86580035, 0.8381724, 0.618777399, 0.4707389,
                0.280194086, 0.95490103, 0.27399251, 0.5894525715, 0.17181438,
                0.261382768, 0.96124295, 0.33737123, 0.3545607659, 0.36367031,
                0.465759262, 0.17167592, 0.87114988, 0.4175856721, 0.16020522,
                0.982323635, 0.30892377, 0.96513595, 0.376671114, 0.9411435,
                0.851789546, 0.42260807, 0.37396782, 0.0759502219, 0.41219659,
                0.23932738, 0.70124641, 0.08544481, 0.8599137105, 0.35298377,
                0.985171556, 0.48493665, 0.92919919, 0.3128095574, 0.84388465,
                0.936608667, 0.70159722, 0.23570122, 0.5124408882, 0.99478731,
                0.328337863, 0.83252833, 0.29078719, 0.7531193637, 0.49378383,
                0.504403078, 0.72845174, 0.12801659, 0.5383322216, 0.12559066,
                0.906952623, 0.36801267, 0.13168735, 0.9791060984, 0.14008791,
                0.454210506, 0.67248289, 0.4041049, 0.234963659, 0.92138674,
                0.499037576, 0.7534805, 0.4168877, 0.6275620307, 0.24189188,
                0.707788941, 0.91990553, 0.56701198, 0.1408275496, 0.80566006,
                0.694437274, 0.69339343, 0.42296251, 0.8271595608, 0.53699966,
                0.447118821, 0.97512181, 0.16431204, 0.3697280197, 0.38753206,
                0.885936489, 0.94468978, 0.48918779, 0.3676202064, 0.06938232,
                0.593980148, 0.28140352, 0.27760537, 0.2819242389, 0.8730862,
                0.04248501, 0.45279893, 0.69760642, 0.0949480394, 0.42568701,
                0.35842742, 0.68098838, 0.82745029, 0.5315801166, 0.31104918,
                0.724621041, 0.28763999, 0.48743089, 0.8648093319, 0.93792148,
                0.961828358, 0.5548953, 0.7250596, 0.249875583, 0.90661302,
                0.251438316, 0.86021024, 0.65037498, 0.209739062, 0.07886205,
                0.699615913, 0.12223695, 0.20393331, 0.6357937951, 0.81502268,
                0.391076967, 0.25143855, 0.16091307, 0.6037441837, 0.50651534,
                0.343597198, 0.82570727, 0.62455707, 0.6284155636, 0.17288776,
                0.451352309, 0.29346835, 0.12641623, 0.1194773833, 0.88849468;
  
  basis << 0.97801674, 0.34045661, 0.20528387, 0.76230322, 0.63244655, 0.61225851, 0.40492125, 0.33112223,
           0.86917047, 0.58444831, 0.33316433, 0.62217709, 0.96820668, 0.20778425, 0.23764591, 0.94193115,
           0.03869153, 0.60847765, 0.51535811, 0.81554404, 0.78515289, 0.23337815, 0.16730957, 0.02168331,
           0.08699654, 0.34067049, 0.93141264, 0.03679176, 0.4364772, 0.2644173, 0.23717182, 0.59084776,
           0.63438143, 0.57132227, 0.17568721, 0.15552373, 0.8625478, 0.02466334, 0.47269628, 0.97782225,
           0.90593388, 0.82272111, 0.67374992, 0.47619752, 0.5276532, 0.75182919, 0.09559243, 0.5126907,
           0.45892102, 0.11357212, 0.77861167, 0.78424907, 0.84693988, 0.38814934, 0.01010333, 0.10064384,
           0.68664865, 0.1264298, 0.14314708, 0.62679815, 0.71101772, 0.43504811, 0.8868721, 0.95098048,
           0.38291537, 0.71337451, 0.12109764, 0.68943347, 0.89878588, 0.67524475, 0.95549402, 0.58758459,
           0.68558459, 0.16794963, 0.23680754, 0.40289479, 0.98291039, 0.87276966, 0.76995475, 0.55282963,
           0.12448394, 0.5479543, 0.8718802, 0.14515363, 0.71311006, 0.39196408, 0.94504373, 0.44020353,
           0.24090674, 0.52675625, 0.86674581, 0.90576332, 0.09167602, 0.74795585, 0.26901811, 0.544173,
           0.03336554, 0.8314331, 0.27185696, 0.83434459;
  
  outcome << 2.158854445, 1.175387297, 0.40481061, 1.751578365, 0.299641379, 0.347249942, 0.546179903,
             1.164750138, 3.389946886, -0.605464414, 1.271432631, 2.203609096, 2.192327323, 0.746140817,
             3.009233058, -0.292800298, 1.752730639, 1.824961588, 2.055603702, -0.153889672, 0.248010541,
             1.099472562, 0.822333874, 1.291797503, 0.877720106, 2.365239601, 0.685716301, 1.445624363,
             1.342180906, 0.148136818, -1.157010472, 2.186988614, 1.523371203, 1.740153725, 0.73351857,
             0.449967161, 1.25200968, 1.155083428, 1.580760814, 3.025557265, 1.488059405, -0.069025021,
             1.100181892, 1.014150762, 0.418207324, 3.210834777, 1.658875834, 2.215173806, 1.351802193,
             1.33331705, 2.357354695, -1.449598055, 1.042660314, 0.404779346, 1.35048031, -0.58922199,
             -0.281044393, 0.128478258, 0.006620112, 1.237840372, 1.0999817, 2.245489523, 2.114281687,
             1.337789336, 0.668884629, 2.275744698, 1.483665856, 0.577564239, -0.557180209, 3.810578895,
             0.946494502, 1.464014296, 0.793749131, 2.735140925, 2.037714409, 1.530792369, 1.857142205,
             1.015348805, -0.91839562, 1.924546112, -0.218826033, 1.761318971, 0.928338732, 1.109589807,
             2.165307398, 2.258640565, 1.147428989, 0.332872857, 0.373646084, 0.520770108, 1.857996323,
             -1.971537882, 0.962010578, 1.552073631, 0.459464684, -0.149159276, 0.203079262, -0.453721958, 2.152977755, 0.948865461;
  
  rfx_basis <<  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1;
  
  for (int i = 0; i < n/2; i++) {
    if (i % 2 == 0) {
      rfx_groups[i] = 1;
    } else {
      rfx_groups[i] = 2;
    }
  }

}

void GenerateRandomData(Eigen::MatrixXd& covariates, Eigen::MatrixXd& basis, Eigen::MatrixXd& outcome, Eigen::MatrixXd& rfx_basis, std::vector<int32_t>& rfx_groups, int n, int x_cols, int omega_cols, int y_cols, int rfx_basis_cols) {
  std::mt19937 gen(101);
  std::uniform_real_distribution<double> uniform_dist{0.0,1.0};
  std::normal_distribution<double> normal_dist(0.,1.);
  std::vector<double> betas{-10, -5, 5, 10};
  int num_partitions = betas.size();
  double beta = 5;
  double f_x_omega;
  double rfx;
  
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < x_cols; j++) {
      covariates(i, j) = uniform_dist(gen);
    }
    
    for (int j = 0; j < omega_cols; j++) {
      basis(i, j) = uniform_dist(gen);
    }
    
    for (int j = 0; j < rfx_basis_cols; j++) {
      rfx_basis(i, j) = 1;
    }
    
    if (i % 2 == 0) {
      rfx_groups[i] = 1;
    } else {
      rfx_groups[i] = 2;
    }
    
    for (int j = 0; j < y_cols; j++) {
      if ((covariates(i, 0) >= 0.0) && covariates(i, 0) < 0.25) {
        f_x_omega = betas[0] * basis(i, 0);
      } else if ((covariates(i, 0) >= 0.25) && covariates(i, 0) < 0.5) {
        f_x_omega = betas[1] * basis(i, 0);
      } else if ((covariates(i, 0) >= 0.5) && covariates(i, 0) < 0.75) {
        f_x_omega = betas[2] * basis(i, 0);
      } else {
        f_x_omega = betas[3] * basis(i, 0);
      }
      if (rfx_groups[i] == 1) {
        rfx = 5.;
      } else {
        rfx = -5.;
      }
      outcome(i, j) = f_x_omega + rfx + normal_dist(gen);
    }
  }
}

void RunExample(bool random_data = true) {
  // Data dimensions
  int n = 100;
  int x_rows = n;
  int x_cols = 10;
  int omega_rows = n;
  int omega_cols = 1;
  int y_rows = n;
  int y_cols = 1;
  int rfx_basis_rows = n;
  int rfx_basis_cols = 1;
  
  // Declare covariates, basis and outcome
  Eigen::MatrixXd covariates(x_rows, x_cols);
  Eigen::MatrixXd basis(omega_rows, omega_cols);
  Eigen::MatrixXd outcome(y_rows, y_cols);
  Eigen::MatrixXd rfx_basis(rfx_basis_rows, rfx_basis_cols);
  std::vector<int32_t> rfx_groups(n);
  
  // Load the data
  if (random_data) {
    GenerateRandomData(covariates, basis, outcome, rfx_basis, rfx_groups, n, x_cols, omega_cols, y_cols, rfx_basis_cols);
  } else {
    GenerateFixedData(covariates, basis, outcome, rfx_basis, rfx_groups, n, x_cols, omega_cols, y_cols, rfx_basis_cols);
  }
  
  // Run the sampler
  std::vector<FeatureType> feature_types(x_cols, FeatureType::kNumeric);
  double nu = 1.0;
  double lambda = 1.0;
  double a_leaf = 1.0;
  double b_leaf = 1.0;
  double a_rfx = 1.0;
  double b_rfx = 1.0;
  double sigma_sq_init = 1.0;
  double tau_init = 1.0;
  int cutpoint_grid_size = 500;
  int num_rfx_groups = 2;
  int num_trees = 20;
  Dispatcher dispatcher(101);
  dispatcher.AddOutcome(outcome.data(), n);
  dispatcher.AddGlobalVarianceTerm(1., 1., 1.);
  dispatcher.AddUnivariateRegressionLeafForest(covariates.data(), x_cols, basis.data(), omega_cols, n, false, num_trees, 0, 1., 0.95, 2.0, 10, ForestSampler::kMCMC, feature_types, cutpoint_grid_size, false, a_leaf, b_leaf);
  dispatcher.AddRandomEffectRegression(rfx_basis.data(), rfx_basis_cols, n, false, rfx_groups, a_rfx, b_rfx, 1, 2);
  dispatcher.SampleModel<RegressionLeafForestDataset, 
                         LeafUnivariateRegressionGaussianPrior,
                         LeafUnivariateRegressionGaussianSuffStat,
                         LeafUnivariateRegressionGaussianSampler,
                         MCMCTreeSampler,
                         UnsortedNodeSampleTracker>(10, 20);
  
  // Predict from the sampled model
  std::vector<double> forest_pred = dispatcher.PredictForest(0, covariates.data(), x_cols, basis.data(), omega_cols, n, false);
  std::vector<double> rfx_pred = dispatcher.PredictRandomEffect(0, rfx_basis.data(), rfx_basis_cols, n, false, rfx_groups);
}

} // namespace StochTree

int main() {
  StochTree::RunExample(true);
}
