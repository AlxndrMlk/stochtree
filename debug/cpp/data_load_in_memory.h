/*!
 * Copyright (c) 2023 stochtree authors
 */
#ifndef STOCHTREE_DEBUG_DATA_LOAD_IN_MEMORY_H_
#define STOCHTREE_DEBUG_DATA_LOAD_IN_MEMORY_H_

#include <stochtree/config.h>
#include <stochtree/data.h>

#include <vector>

namespace StochTree {

  void DebuggingDataLoadInMemory(){
    // Matrix of data, generated in R via matrix(runif(n*p), ncol = p) for n and p below
    data_size_t n = 20;
    int32_t p = 10;
    std::vector<double> data_vector = {
      0.4362414277, 0.16993009, 0.4480365, 0.96601314, 0.96670851, 0.5170531, 0.06324292, 0.04800917, 0.99639717, 0.8767889,
      0.4757478742, 0.54716648, 0.2399996, 0.35920028, 0.88927847, 0.875529, 0.20424956, 0.69074249, 0.17876205, 0.5990918,
      0.6847189441, 0.74218087, 0.9815267, 0.88114405, 0.26387458, 0.6568786, 0.47505177, 0.12363487, 0.32110648, 0.8167763,
      0.7001678741, 0.04705801, 0.4348572, 0.751921, 0.12020009, 0.48823, 0.09089978, 0.12135541, 0.73830934, 0.3921945,
      0.8257637497, 0.09096892, 0.9015502, 0.02212563, 0.35117133, 0.7267357, 0.5496434, 0.82270785, 0.91028182, 0.5602855,
      0.4018500855, 0.06011201, 0.7046916, 0.43557472, 0.03440321, 0.992761, 0.55159931, 0.4143634, 0.13366004, 0.7311572,
      0.966449738, 0.50607831, 0.9379866, 0.42251181, 0.93066095, 0.3518555, 0.53004921, 0.03665408, 0.73438355, 0.310253,
      0.7874742548, 0.91962718, 0.5622084, 0.66324613, 0.53183342, 0.7565854, 0.51954391, 0.242209, 0.54070963, 0.7052401,
      0.8122781562, 0.0853524, 0.9000659, 0.7025483, 0.7792386, 0.5842398, 0.15714137, 0.40729837, 0.42263619, 0.7506207,
      0.7784853883, 0.56452444, 0.1778768, 0.54350441, 0.55593617, 0.8112128, 0.48251715, 0.9621942, 0.09164907, 0.4403519,
      0.0002780603, 0.59577116, 0.2793828, 0.09388843, 0.87592489, 0.4641341, 0.22166234, 0.20968777, 0.67090832, 0.5987245,
      0.7759618091, 0.96899477, 0.5784426, 0.18831318, 0.42742281, 0.6252176, 0.66194509, 0.75776473, 0.11507065, 0.263872,
      0.734690391, 0.33690237, 0.1549258, 0.39052932, 0.91417973, 0.7831089, 0.59924208, 0.06334241, 0.08949151, 0.4511461,
      0.0514305558, 0.7080925, 0.5015847, 0.16367075, 0.83594354, 0.9656884, 0.34734695, 0.12131527, 0.41955299, 0.5762294,
      0.1081731343, 0.84324524, 0.6982764, 0.9335944, 0.95951289, 0.66017, 0.40941391, 0.33758439, 0.59939335, 0.3342732,
      0.9974623162, 0.5701665, 0.5753472, 0.30724078, 0.95430127, 0.2653695, 0.47020346, 0.30756297, 0.56964648, 0.8973578,
      0.3313491785, 0.14320122, 0.8340025, 0.8101327, 0.69898676, 0.2949846, 0.72445841, 0.79785762, 0.0707312, 0.696528,
      0.2661839724, 0.74462147, 0.5310885, 0.18476103, 0.56475759, 0.726991, 0.30299662, 0.79543182, 0.32123483, 0.900462,
      0.9833468392, 0.46744763, 0.7317747, 0.90273508, 0.58828617, 0.5107459, 0.1121079, 0.86426892, 0.27312745, 0.7002443,
      0.7462283287, 0.55002068, 0.2363799, 0.5211001, 0.03144349, 0.9995112, 0.83999688, 0.19045538, 0.45061811, 0.3567421
    };
    
    // Define any config parameters that aren't defaults
    const char* params = "label_columns=0 num_trees=2 min_data_in_leaf=1 alpha=0.95 beta=1.25";
    auto param = Config::Str2Map(params);
    Config config;
    config.Set(param);

    // Define data loader
    DataLoader dataset_loader(config, 1, nullptr);

    // Load the data
    std::unique_ptr<Dataset> dataset;
    dataset.reset(dataset_loader.ConstructFromMatrix(data_vector.data(), p, n, true));
  }

} // namespace StochTree

#endif  // STOCHTREE_DEBUG_DATA_LOAD_IN_MEMORY_H_
