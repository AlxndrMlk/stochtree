// Generated by cpp11: do not edit by hand
// clang-format off

#include <stochtree/dispatcher.h>
#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// bart.cpp
cpp11::external_pointer<StochTree::MCMCDispatcher> bart_sample_cpp(cpp11::doubles_matrix<> y, cpp11::doubles_matrix<> X, cpp11::doubles_matrix<> omega, int num_samples, int num_burnin, int num_trees, double nu, double lambda, int random_seed);
extern "C" SEXP _stoch_tree_bart_sample_cpp(SEXP y, SEXP X, SEXP omega, SEXP num_samples, SEXP num_burnin, SEXP num_trees, SEXP nu, SEXP lambda, SEXP random_seed) {
  BEGIN_CPP11
    return cpp11::as_sexp(bart_sample_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::doubles_matrix<>>>(y), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles_matrix<>>>(X), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles_matrix<>>>(omega), cpp11::as_cpp<cpp11::decay_t<int>>(num_samples), cpp11::as_cpp<cpp11::decay_t<int>>(num_burnin), cpp11::as_cpp<cpp11::decay_t<int>>(num_trees), cpp11::as_cpp<cpp11::decay_t<double>>(nu), cpp11::as_cpp<cpp11::decay_t<double>>(lambda), cpp11::as_cpp<cpp11::decay_t<int>>(random_seed)));
  END_CPP11
}
// bart.cpp
cpp11::writable::doubles_matrix<> bart_predict_cpp(cpp11::external_pointer<StochTree::MCMCDispatcher> bart_ptr, cpp11::doubles_matrix<> X, cpp11::doubles_matrix<> omega, int num_samples);
extern "C" SEXP _stoch_tree_bart_predict_cpp(SEXP bart_ptr, SEXP X, SEXP omega, SEXP num_samples) {
  BEGIN_CPP11
    return cpp11::as_sexp(bart_predict_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::MCMCDispatcher>>>(bart_ptr), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles_matrix<>>>(X), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles_matrix<>>>(omega), cpp11::as_cpp<cpp11::decay_t<int>>(num_samples)));
  END_CPP11
}
// xbart.cpp
cpp11::external_pointer<StochTree::GFRDispatcher> xbart_sample_cpp(cpp11::doubles_matrix<> y, cpp11::doubles_matrix<> X, cpp11::doubles_matrix<> omega, int num_samples, int num_burnin, int num_trees, double nu, double lambda, int cutpoint_grid_size, int random_seed);
extern "C" SEXP _stoch_tree_xbart_sample_cpp(SEXP y, SEXP X, SEXP omega, SEXP num_samples, SEXP num_burnin, SEXP num_trees, SEXP nu, SEXP lambda, SEXP cutpoint_grid_size, SEXP random_seed) {
  BEGIN_CPP11
    return cpp11::as_sexp(xbart_sample_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::doubles_matrix<>>>(y), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles_matrix<>>>(X), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles_matrix<>>>(omega), cpp11::as_cpp<cpp11::decay_t<int>>(num_samples), cpp11::as_cpp<cpp11::decay_t<int>>(num_burnin), cpp11::as_cpp<cpp11::decay_t<int>>(num_trees), cpp11::as_cpp<cpp11::decay_t<double>>(nu), cpp11::as_cpp<cpp11::decay_t<double>>(lambda), cpp11::as_cpp<cpp11::decay_t<int>>(cutpoint_grid_size), cpp11::as_cpp<cpp11::decay_t<int>>(random_seed)));
  END_CPP11
}
// xbart.cpp
cpp11::writable::doubles_matrix<> xbart_predict_cpp(cpp11::external_pointer<StochTree::GFRDispatcher> xbart_ptr, cpp11::doubles_matrix<> X, cpp11::doubles_matrix<> omega, int num_samples);
extern "C" SEXP _stoch_tree_xbart_predict_cpp(SEXP xbart_ptr, SEXP X, SEXP omega, SEXP num_samples) {
  BEGIN_CPP11
    return cpp11::as_sexp(xbart_predict_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::GFRDispatcher>>>(xbart_ptr), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles_matrix<>>>(X), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles_matrix<>>>(omega), cpp11::as_cpp<cpp11::decay_t<int>>(num_samples)));
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_stoch_tree_bart_predict_cpp",  (DL_FUNC) &_stoch_tree_bart_predict_cpp,   4},
    {"_stoch_tree_bart_sample_cpp",   (DL_FUNC) &_stoch_tree_bart_sample_cpp,    9},
    {"_stoch_tree_xbart_predict_cpp", (DL_FUNC) &_stoch_tree_xbart_predict_cpp,  4},
    {"_stoch_tree_xbart_sample_cpp",  (DL_FUNC) &_stoch_tree_xbart_sample_cpp,  10},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_stoch_tree(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
