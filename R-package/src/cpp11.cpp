// Generated by cpp11: do not edit by hand
// clang-format off

#include <stochtree/interface.h>
#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// xbart.cpp
cpp11::external_pointer<StochTree::StochTreeInterface> xbart_sample_cpp(cpp11::doubles_matrix<> model_matrix, cpp11::r_string param_string);
extern "C" SEXP _stoch_tree_xbart_sample_cpp(SEXP model_matrix, SEXP param_string) {
  BEGIN_CPP11
    return cpp11::as_sexp(xbart_sample_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::doubles_matrix<>>>(model_matrix), cpp11::as_cpp<cpp11::decay_t<cpp11::r_string>>(param_string)));
  END_CPP11
}
// xbart.cpp
cpp11::writable::doubles_matrix<> xbart_predict_cpp(cpp11::external_pointer<StochTree::StochTreeInterface> xbart_ptr, cpp11::doubles_matrix<> model_matrix, cpp11::r_string param_string);
extern "C" SEXP _stoch_tree_xbart_predict_cpp(SEXP xbart_ptr, SEXP model_matrix, SEXP param_string) {
  BEGIN_CPP11
    return cpp11::as_sexp(xbart_predict_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::StochTreeInterface>>>(xbart_ptr), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles_matrix<>>>(model_matrix), cpp11::as_cpp<cpp11::decay_t<cpp11::r_string>>(param_string)));
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_stoch_tree_xbart_predict_cpp", (DL_FUNC) &_stoch_tree_xbart_predict_cpp, 3},
    {"_stoch_tree_xbart_sample_cpp",  (DL_FUNC) &_stoch_tree_xbart_sample_cpp,  2},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_stoch_tree(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
